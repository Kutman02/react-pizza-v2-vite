import React from 'react';
import { useSelector } from 'react-redux';

import { Categories, Sort, Skeleton, Pagination } from '../components';
import { ProductBlock } from '../components';

import { useAppDispatch } from '../redux/store';
import { selectFilter } from '../redux/filter/selectors';
import { selectProductData } from '../redux/products/selectors';
import { setCategoryId, setCurrentPage } from '../redux/filter/slice';
import { fetchAllProducts } from '../redux/products/slice'; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º fetchAllProducts
import type { Product } from '../redux/products/types';

const Home: React.FC = () => {
  const dispatch = useAppDispatch();

  const { items, status, error } = useSelector(selectProductData); // –î–æ–±–∞–≤–ª–µ–Ω–æ error

  // –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
  React.useEffect(() => {
    if (items.length > 0) {
      console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤:');
      const types = [...new Set(items.map((item) => item.type))];
      console.log('–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –≤ –¥–∞–Ω–Ω—ã—Ö:', JSON.stringify(types, null, 2));

      items.slice(0, 5).forEach((item, index) => {
        console.log(
          `–¢–æ–≤–∞—Ä ${index + 1}:`,
          JSON.stringify({ id: item.id, title: item.title, type: item.type }, null, 2),
        );
      });
    }
  }, [items]);

  const pizzas = items.filter((item) => item.type === 'pizzas');
  const drinks = items.filter((item) => item.type === 'drinks');
  const shaurma = items.filter((item) => item.type === 'shaurma');
  const sweets = items.filter((item) => item.type === 'sweets');

  const { categoryId, sort, currentPage, searchValue } = useSelector(selectFilter);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  React.useEffect(() => {
    console.group('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Home');
    console.log('–°—Ç–∞—Ç—É—Å:', status);
    console.log('–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:', items.length);
    console.log(
      '–ü–∏—Ü—Ü—ã:',
      pizzas.length,
      '–∏–∑ –Ω–∏—Ö:',
      JSON.stringify(
        pizzas.slice(0, 2).map((p) => p.title),
        null,
        2,
      ),
    );
    console.log(
      '–ù–∞–ø–∏—Ç–∫–∏:',
      drinks.length,
      '–∏–∑ –Ω–∏—Ö:',
      JSON.stringify(
        drinks.slice(0, 2).map((p) => p.title),
        null,
        2,
      ),
    );
    console.log(
      '–®–∞—É—Ä–º–∞:',
      shaurma.length,
      '–∏–∑ –Ω–∏—Ö:',
      JSON.stringify(
        shaurma.slice(0, 2).map((p) => p.title),
        null,
        2,
      ),
    );
    console.log(
      '–°–ª–∞–¥–æ—Å—Ç–∏:',
      sweets.length,
      '–∏–∑ –Ω–∏—Ö:',
      JSON.stringify(
        sweets.slice(0, 2).map((p) => p.title),
        null,
        2,
      ),
    );
    if (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
    }
    console.groupEnd();
  }, [
    status,
    items.length,
    pizzas.length,
    drinks.length,
    shaurma.length,
    sweets.length,
    error,
    pizzas,
    drinks,
    shaurma,
    sweets,
  ]);

  const onChangeCategory = React.useCallback(
    (idx: number) => {
      console.log('üìÇ –°–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞:', idx);
      dispatch(setCategoryId(idx));
    },
    [dispatch],
  );

  const onChangePage = (page: number) => {
    console.log('üìÑ –°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞:', page);
    dispatch(setCurrentPage(page));
  };

  React.useEffect(() => {
    console.group('üîÑ –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤');
    console.log(
      '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞:',
      JSON.stringify(
        {
          categoryId,
          sortProperty: sort.sortProperty,
          currentPage,
          searchValue,
        },
        null,
        2,
      ),
    );

    const sortBy = sort.sortProperty.replace('-', '');
    const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';
    const category = categoryId > 0 ? String(categoryId) : '';
    const search = searchValue;
    const page = String(currentPage);

    console.log(
      '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:',
      JSON.stringify(
        {
          sortBy,
          order,
          category,
          search,
          page,
        },
        null,
        2,
      ),
    );

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetchAllProducts –≤–º–µ—Å—Ç–æ fetchProducts
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å fetchAllProducts...');
    dispatch(fetchAllProducts());
    console.groupEnd();

    window.scrollTo(0, 0);
  }, [categoryId, sort.sortProperty, searchValue, currentPage, dispatch]);

  const renderProductList = (title: string, items: Product[]) => {
    const isLoading = status === 'loading' && items.length === 0;

    console.log(
      `üéØ –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ "${title}":`,
      JSON.stringify(
        {
          –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: items.length,
          —Å—Ç–∞—Ç—É—Å: status,
          –ø–æ–∫–∞–∑–∞—Ç—å–°–∫–µ–ª–µ—Ç–æ–Ω: isLoading,
          –ø–µ—Ä–≤—ã–µ–¢–æ–≤–∞—Ä—ã: items.slice(0, 2).map((item) => ({ id: item.id, title: item.title })),
        },
        null,
        2,
      ),
    );

    return (
      <>
        <h2 className="text-2xl font-bold mb-4">{title}</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 mb-10">
          {isLoading
            ? [...new Array(4)].map((_, i) => {
                console.log(`üíÄ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω ${i + 1} –¥–ª—è "${title}"`);
                return <Skeleton key={i} />;
              })
            : items.map((item) => (
                <ProductBlock
                  key={item.id}
                  {...item}
                  sizes={item.sizes ?? []}
                  types={item.types ?? []}
                  volume={item.volume ?? []}
                  rating={item.rating ?? 0}
                />
              ))}
        </div>
      </>
    );
  };

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  console.log('üè† Home –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è, —Å—Ç–∞—Ç—É—Å:', status);

  return (
    <div className="container mx-auto px-4">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
        <Categories value={categoryId} onChangeCategory={onChangeCategory} />
        <Sort value={sort} />
      </div>

      {status === 'error' ? (
        <div className="text-center text-red-600">
          <h2 className="text-2xl mb-2">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
          <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
          {error && (
            <details className="mt-4 text-left bg-red-50 p-4 rounded">
              <summary className="cursor-pointer font-semibold">–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏</summary>
              <pre className="mt-2 text-sm text-red-700">{error}</pre>
            </details>
          )}
        </div>
      ) : (
        <>
          {renderProductList('–ü–∏—Ü—Ü—ã', pizzas)}
          {renderProductList('–ù–∞–ø–∏—Ç–∫–∏', drinks)}
          {renderProductList('–®–∞—É—Ä–º–∞', shaurma)}
          {renderProductList('–°–ª–∞–¥–æ—Å—Ç–∏', sweets)}
        </>
      )}

      <Pagination currentPage={currentPage} onChangePage={onChangePage} />
    </div>
  );
};

export default Home;
