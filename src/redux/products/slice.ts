import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';
import type { Product } from './types';

interface ProductState {
  items: Product[];
  status: 'loading' | 'success' | 'error';
  error: string | null;
}

const initialState: ProductState = {
  items: [],
  status: 'loading',
  error: null,
};

export const fetchAllProducts = createAsyncThunk<Product[], void>(
  'products/fetchAll',
  async (_, { rejectWithValue }) => {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤...');

      const startTime = Date.now();

      const [pizzas, drinks, shaurma, sweets] = await Promise.all([
        axios.get<Product[]>('http://localhost:3000/pizzas'),
        axios.get<Product[]>('http://localhost:3000/drinks'),
        axios.get<Product[]>('http://localhost:3000/shaurma'),
        axios.get<Product[]>('http://localhost:3000/sweets'),
      ]);

      const endTime = Date.now();
      console.log(`‚è±Ô∏è –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ ${endTime - startTime}–º—Å`);

      const results = {
        pizzas: pizzas.data,
        drinks: drinks.data,
        shaurma: shaurma.data,
        sweets: sweets.data,
      };

      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:');
      console.log(`  üçï –ü–∏—Ü—Ü—ã: ${results.pizzas.length} —à—Ç.`);
      console.log(`  ü•§ –ù–∞–ø–∏—Ç–∫–∏: ${results.drinks.length} —à—Ç.`);
      console.log(`  üåØ –®–∞—É—Ä–º–∞: ${results.shaurma.length} —à—Ç.`);
      console.log(`  üç∞ –°–ª–∞–¥–æ—Å—Ç–∏: ${results.sweets.length} —à—Ç.`);

      const allProducts = [...pizzas.data, ...drinks.data, ...shaurma.data, ...sweets.data];
      console.log(`‚úÖ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${allProducts.length}`);

      return allProducts;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤:');

      if (axios.isAxiosError(error)) {
        console.error('üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:');
        console.error('  URL:', error.config?.url);
        console.error('  –ú–µ—Ç–æ–¥:', error.config?.method?.toUpperCase());
        console.error('  –°—Ç–∞—Ç—É—Å:', error.response?.status);
        console.error('  –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:', error.response?.statusText);
        console.error('  –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response?.data);
        console.error('  –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error.response?.headers);

        if (error.code) {
          console.error('  –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
        }

        if (!error.response) {
          console.error('  üîå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        }

        return rejectWithValue({
          message: error.message,
          status: error.response?.status,
          statusText: error.response?.statusText,
          url: error.config?.url,
          code: error.code,
        });
      } else {
        console.error('  üí• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        return rejectWithValue({
          message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        });
      }
    }
  },
);

const productSlice = createSlice({
  name: 'products',
  initialState,
  reducers: {
    setItems(state, action) {
      console.log('üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä—É—á–Ω—É—é:', action.payload.length);
      state.items = action.payload;
    },
    clearError(state) {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏');
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllProducts.pending, (state) => {
        console.log('‚è≥ –°—Ç–∞—Ç—É—Å: –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
        state.status = 'loading';
        state.error = null;
      })
      .addCase(fetchAllProducts.fulfilled, (state, action) => {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å: —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        console.log('üì¶ –¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ store:', action.payload.length);
        state.items = action.payload;
        state.status = 'success';
        state.error = null;
      })
      .addCase(fetchAllProducts.rejected, (state, action) => {
        console.error('üí• –°—Ç–∞—Ç—É—Å: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', action.payload);
        console.error('üîç Action error:', action.error);

        state.status = 'error';
        state.items = [];

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        if (action.payload && typeof action.payload === 'object') {
          const errorPayload = action.payload as {
            message: string;
            status?: number;
            statusText?: string;
          };
          state.error = `${errorPayload.message} (${errorPayload.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'})`;
        } else {
          state.error = action.error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤';
        }
      });
  },
});

export const { setItems, clearError } = productSlice.actions;
export default productSlice.reducer;
